// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FitnessClubRewards {
    struct Member {
        uint256 rewards; // Total rewards earned
        bool isMember;   // Membership status
    }

    address public owner;
    mapping(address => Member) public members;

    event MemberRegistered(address member);
    event RewardsEarned(address member, uint256 points);
    event RewardsRedeemed(address member, uint256 points);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier onlyMember() {
        require(members[msg.sender].isMember, "You must be a registered member");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Register a new member
    function registerMember(address _member) public onlyOwner {
        require(!members[_member].isMember, "Already a member");
        members[_member] = Member(0, true);
        emit MemberRegistered(_member);
    }

    // Earn rewards for fitness activities
    function earnRewards(address _member, uint256 _points) public onlyOwner {
        require(members[_member].isMember, "Not a registered member");
        members[_member].rewards += _points;
        emit RewardsEarned(_member, _points);
    }

    // Redeem rewards
    function redeemRewards(uint256 _points) public onlyMember {
        require(members[msg.sender].rewards >= _points, "Insufficient rewards");
        members[msg.sender].rewards -= _points;
        emit RewardsRedeemed(msg.sender, _points);
    }

    // View reward balance
    function viewRewards() public view onlyMember returns (uint256) {
        return members[msg.sender].rewards;
    }
}

