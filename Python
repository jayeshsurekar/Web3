import hashlib
import json
import time
import tkinter as tk
from tkinter import scrolledtext

# Block Class
class Block:
    def __init__(self, index, previous_hash, transactions, timestamp=None):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp or time.time()
        self.transactions = transactions
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps({
            'index': self.index,
            'previous_hash': self.previous_hash,
            'timestamp': self.timestamp,
            'transactions': self.transactions
        }, sort_keys=True).encode()

        return hashlib.sha256(block_string).hexdigest()

    def __repr__(self):
        return f"Block {self.index} [hash: {self.hash}]"

# Blockchain Class
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.pending_transactions = []
        self.difficulty = 2  # Number of leading zeros for Proof-of-Work
        self.balances = {"A": 100}  # Initialize default balance (for example)

    def create_genesis_block(self):
        return Block(0, "0", "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)
        self.update_balances(new_block.transactions)

    def mine_pending_transactions(self):
        if not self.pending_transactions:
            return "No transactions to mine"
        
        new_block = Block(len(self.chain), self.get_latest_block().hash, self.pending_transactions)
        self.proof_of_work(new_block)
        self.add_block(new_block)
        self.pending_transactions = []

    def proof_of_work(self, block):
        while not block.hash.startswith('0' * self.difficulty):
            block.timestamp = time.time()
            block.hash = block.calculate_hash()
        print(f"Block mined: {block.hash}")

    def add_transaction(self, transaction):
        from_user = transaction["from"]
        amount = transaction["amount"]

        # Check if 'from' user has enough balance
        if self.balances.get(from_user, 0) < amount:
            return False  # Transaction invalid if balance is insufficient
        self.pending_transactions.append(transaction)
        return True

    def update_balances(self, transactions):
        for tx in transactions:
            from_user = tx["from"]
            to_user = tx["to"]
            amount = tx["amount"]

            # Deduct from 'from' user
            self.balances[from_user] = self.balances.get(from_user, 0) - amount
            # Add to 'to' user
            self.balances[to_user] = self.balances.get(to_user, 0) + amount

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

# Tkinter Application
class BlockchainApp:
    def __init__(self, root):
        self.blockchain = Blockchain()

        self.root = root
        self.root.title("Blockchain Application")

        # Transaction Input
        self.transaction_frame = tk.Frame(self.root)
        self.transaction_frame.pack(pady=10)

        tk.Label(self.transaction_frame, text="From").grid(row=0, column=0)
        self.from_entry = tk.Entry(self.transaction_frame)
        self.from_entry.grid(row=0, column=1)

        tk.Label(self.transaction_frame, text="To").grid(row=1, column=0)
        self.to_entry = tk.Entry(self.transaction_frame)
        self.to_entry.grid(row=1, column=1)

        tk.Label(self.transaction_frame, text="Amount").grid(row=2, column=0)
        self.amount_entry = tk.Entry(self.transaction_frame)
        self.amount_entry.grid(row=2, column=1)

        self.add_transaction_btn = tk.Button(self.transaction_frame, text="Add Transaction", command=self.add_transaction)
        self.add_transaction_btn.grid(row=3, columnspan=2, pady=10)

        # Mining Button
        self.mine_btn = tk.Button(self.root, text="Mine Transactions", command=self.mine_transactions)
        self.mine_btn.pack(pady=10)

        # Blockchain Display
        self.blockchain_display = scrolledtext.ScrolledText(self.root, width=60, height=20)
        self.blockchain_display.pack(pady=10)

        # Validate Blockchain Button
        self.validate_btn = tk.Button(self.root, text="Check Blockchain Validity", command=self.check_validity)
        self.validate_btn.pack(pady=10)

        # Blockchain Status
        self.status_label = tk.Label(self.root, text="")
        self.status_label.pack(pady=10)

        # Balance Display
        self.balance_display = scrolledtext.ScrolledText(self.root, width=40, height=10)
        self.balance_display.pack(pady=10)

    def add_transaction(self):
        from_address = self.from_entry.get()
        to_address = self.to_entry.get()
        amount = self.amount_entry.get()

        if from_address and to_address and amount:
            try:
                amount = float(amount)
                transaction = {"from": from_address, "to": to_address, "amount": amount}

                # Add transaction if valid
                if self.blockchain.add_transaction(transaction):
                    self.status_label.config(text="Transaction added.")
                else:
                    self.status_label.config(text=f"Insufficient balance for {from_address}.")
            except ValueError:
                self.status_label.config(text="Amount must be a number.")
        else:
            self.status_label.config(text="Please fill in all fields.")

    def mine_transactions(self):
        result = self.blockchain.mine_pending_transactions()
        if result == "No transactions to mine":
            self.status_label.config(text=result)
        else:
            self.status_label.config(text="Transactions mined successfully.")
            self.update_blockchain_display()
            self.update_balances_display()

    def check_validity(self):
        if self.blockchain.is_chain_valid():
            self.status_label.config(text="Blockchain is valid.")
        else:
            self.status_label.config(text="Blockchain is invalid!")

    def update_blockchain_display(self):
        self.blockchain_display.delete(1.0, tk.END)
        for block in self.blockchain.chain:
            self.blockchain_display.insert(tk.END, f"{block}\n\n")

    def update_balances_display(self):
        self.balance_display.delete(1.0, tk.END)
        for user, balance in self.blockchain.balances.items():
            self.balance_display.insert(tk.END, f"{user}: {balance}\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = BlockchainApp(root)
    root.mainloop()

